<!DOCTYPE html>
<html lang="en" data-theme="{{ request.cookies.get('vpc_theme', 'dark') }}">
<head>
  <meta name="color-scheme" content="dark light">
  <script>
    // ---------- Customer Auto-Population ----------
    {% if customer_info %}
    (function() {
      window.addEventListener('DOMContentLoaded', function() {
        // Auto-populate form fields with customer information
        const customerData = {{ customer_info | tojson }};

        if (customerData.first_name && document.getElementById('first_name')) {
          document.getElementById('first_name').value = customerData.first_name;
        }
        if (customerData.last_name && document.getElementById('last_name')) {
          document.getElementById('last_name').value = customerData.last_name;
        }
        if (customerData.company_name && document.getElementById('company')) {
          document.getElementById('company').value = customerData.company_name;
        }
        if (customerData.phone && document.getElementById('phone')) {
          document.getElementById('phone').value = customerData.phone;
        }
        if (customerData.email && document.getElementById('email')) {
          document.getElementById('email').value = customerData.email;
        }

        // Show a notice that fields were auto-populated
        const notice = document.createElement('div');
        notice.style.cssText = 'background:#101A28;border:1px solid #23324a;color:#cfe3ff;border-radius:10px;padding:12px 14px;margin:0 0 20px 0;font-size:14px;';
        notice.innerHTML = '<strong>✓ Info:</strong> Your contact information has been auto-filled from your account. You can edit these fields as needed.';
        const formBody = document.querySelector('.form-body');
        if (formBody) {
          formBody.insertBefore(notice, formBody.firstChild);
        }
      });
    })();
    {% endif %}

    (function(){
      try{
        var m=document.cookie.match(/(?:^|; )vpc_theme=([^;]+)/);
        var s=(m?decodeURIComponent(m[1]):null) || localStorage.getItem('vpc_theme') || 'dark';
        document.documentElement.setAttribute('data-theme', s);
        document.documentElement.style.backgroundColor = s==='dark' ? '#0e141b' : '#f7f9fc';
      }catch(e){}
    })();
  </script>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Production Intake Form</title>
  <link rel="icon" href="{{ branding_favicon or url_for('static', filename='logos/favicon-1.png.PNG') }}"> 
  <style>
    :root{
      --bg:#0e141b; --panel:#111923; --panel-2:#0f1720; --text:#e6edf3; --muted:#9fb0c0;
      --primary:#3b82f6; --primary-2:#2b68c9; --success:#10b981; --error:#ef4444; --border:#1f2a37; --input:#0c1218;
      --shadow: 0 2px 30px rgba(0,0,0,.35); --radius:12px;
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0;background:
        radial-gradient(1200px 600px at 80% -10%, #1e293b22, transparent 60%),
        radial-gradient(800px 400px at -10% 30%, #1e293b22, transparent 60%),
        var(--bg);
      color:var(--text);font-family: ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, Arial, "Noto Sans";padding:20px;
    }
    .container{max-width:1000px;margin:0 auto;position:relative}
    .topbar{display:flex;gap:8px;justify-content:flex-end;margin-bottom:10px}
    .btn{padding:8px 12px;border-radius:10px;border:1px solid var(--border);cursor:pointer;font-weight:600;background:var(--panel-2);color:var(--muted)}
    .btn:hover{color:var(--text)}
    .btn.primary{background:var(--primary);border-color:transparent;color:white}
    .form-container{background:linear-gradient(180deg,var(--panel),var(--panel-2));border:1px solid var(--border);border-radius:var(--radius);box-shadow:var(--shadow);overflow:hidden}
    .header{padding:20px;border-bottom:1px solid var(--border);position:relative}
    .header h1{margin:0 0 6px;font-size:26px}
    .header p{margin:0;color:var(--muted)}
    .header:after{content:"";position:absolute;inset-inline:0;bottom:0;height:3px;background:linear-gradient(90deg,var(--primary),var(--success))}
    .form-body{padding:24px}
    .form-row{display:flex;flex-wrap:wrap;margin:0 -10px 14px}
    .form-group{flex:1 0 calc(50% - 20px);min-width:260px;margin:0 10px 14px}
    .form-group.full{flex-basis:calc(100% - 20px)}
    label{display:block;margin:0 0 8px;color:var(--muted);font-weight:600}
    .required::after{content:" *";color:var(--error)}
    .input-wrap{position:relative}
    .input-wrap .icon{position:absolute;left:12px;top:50%;transform:translateY(-50%);color:var(--primary)}
    input,select,textarea{
      width:100%;padding:12px 14px 12px 40px;background:var(--input);border:1px solid var(--border);
      border-radius:10px;color:var(--text);font-size:16px;outline:none;transition:border-color .2s, box-shadow .2s;
    }
    input:focus,select:focus,textarea:focus{border-color:var(--primary);box-shadow:0 0 0 3px #3b82f633}
    textarea{min-height:120px;resize:vertical}
    .btns {
      display: flex !important;
      gap: 12px !important;
      justify-content: flex-end !important;
      margin-top: 24px !important;
      padding-top: 16px !important;
      border-top: 1px solid var(--border) !important;
    }
    
    /* Enhanced form button styling */
    .btns .btn {
      min-width: 120px !important;
    }
    
    .btns .btn.primary {
      background: var(--primary) !important;
      border-color: var(--primary) !important;
      color: #fff !important;
    }
    .help{color:var(--muted);font-size:13px;margin-top:6px}

    /* Suggestions */
    .suggest{position:relative}
    .suggest-list{position:absolute;z-index:50;top:100%;left:0;right:0;background:var(--panel-2);border:1px solid var(--border);
      border-radius:10px;margin-top:6px;display:none;max-height:210px;overflow:auto}
    .suggest-item{padding:8px 12px;cursor:pointer;color:var(--text)}
    .suggest-item:hover{background:#1b2430}

    /* Editor */
    .overlay{position:fixed;inset:0;background:#0007;opacity:0;visibility:hidden;transition:.28s;z-index:900}
    .overlay.open{opacity:1;visibility:visible}
    .admin{position:fixed;top:0;right:-460px;width:460px;max-width:100%;height:100%;background:var(--panel);border-left:1px solid var(--border);box-shadow:var(--shadow);transition:right .28s;z-index:1000;overflow:auto}
    .admin.open{right:0}
    .section{padding:18px;border-bottom:1px solid var(--border)}
    .section h3{margin:0 0 12px;display:flex;justify-content:space-between;align-items:center}
    .row{display:flex;gap:10px;margin:6px 0}
    .pill{background:#1b2430;color:#c6d4e2;padding:4px 8px;border-radius:999px;font-size:12px}
    .admin input[type="text"]{width:100%;padding:8px 10px;border:1px solid var(--border);border-radius:8px;background:var(--input);color:var(--text)}
    .admin button{padding:8px 10px;border-radius:8px;border:1px solid var(--border);background:#18222e;color:#c6d4e2;cursor:pointer}
    .admin button.primary{background:var(--primary);border-color:transparent;color:white}
    .opt-row{display:flex;gap:8px;align-items:center;margin-bottom:6px}
    .grow{flex:1}
    .error{text-align:center;color:#ffd2d2;background:#4b1f1f;border:1px solid #7a2b2b;padding:8px;border-radius:10px;margin:8px 0}
    .ok{text-align:center;color:#cff7e1;background:#0b3a2a;border:1px solid #135a3f;padding:8px;border-radius:10px;margin:8px 0}
    @media (max-width:780px){.form-group{flex-basis:calc(100% - 20px)}}
  </style>
  <!-- Unified theme system -->
  <link rel="stylesheet" href="{{ url_for('static', filename='css/theme.css') }}">
  <link rel="stylesheet" href="{{ url_for('static', filename='css/components.css') }}">
  <script src="{{ url_for('static', filename='js/theme.js') }}"></script>
  <script src="{{ url_for('static', filename='js/motion.js') }}"></script>
  <script src="{{ url_for('static', filename='js/ui-core.js') }}"></script>
  <script src="{{ url_for('static', filename='js/global-theme-menu.js') }}"></script>
</head>
<body>
  <!-- Theme button automatically injected by global-theme-menu.js -->
  <!-- Flash messages -->
  <div class="flash-messages">
    {% with messages = get_flashed_messages(with_categories=true) %}
      {% if messages %}
        {% for category, message in messages %}
          <div class="flash-message {{ category }}" role="alert">
            {{ message }}
            <button type="button" class="close" onclick="this.parentElement.remove()" aria-label="Close">x</button>
          </div>
        {% endfor %}
      {% endif %}
    {% endwith %}
  </div>
  <header class="topbar">
    <div class="container" style="display:flex;align-items:center;justify-content:space-between;gap:8px">
      <h1 style="margin:0;font-size:18px">Production Intake</h1>
      <div style="display:flex;gap:8px;align-items:center">
        {% if is_customer_logged_in %}
        <a class="btn" href="{{ url_for('customer_portal.dashboard') }}">Back to Portal</a>
        {% else %}
        <a class="btn" href="/nav">Back to Nav</a>
        {% endif %}
        {% if is_admin() %}
        <button class="btn" id="openEditorBtn" type="button">Edit Form</button>
        {% endif %}
      </div>
    </div>
  </header>
  <div class="container">

    <div id="submitBanner" class="ok" style="display:none; transition: opacity .35s ease">Form submitted!</div>
    <div class="form-container">
      <div class="header">
        <h1>Production Intake Form</h1>
        <p>Fill out required fields.</p>
      </div>

      <div class="form-body">
        <form id="intakeForm" action="/submit" method="post" autocomplete="off" enctype="multipart/form-data">
          <input type="hidden" name="intake_source" value="production"/>
          <div class="form-row">
            <div class="form-group">
              <label class="required" for="dateIn">Date In</label>
              <div class="input-wrap"><span class="icon"></span><input type="date" id="dateIn" name="dateIn" required/></div>
            </div>
            <div class="form-group">
              <label for="dueBy">Due By</label>
              <div class="input-wrap"><span class="icon"></span><input type="date" id="dueBy" name="dueBy"/></div>
            </div>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label class="required" for="first_name">First Name</label>
              <div class="input-wrap"><span class="icon"></span><input type="text" id="first_name" name="first_name" placeholder="First Name" required/></div>
            </div>
            <div class="form-group">
              <label class="required" for="last_name">Last Name</label>
              <div class="input-wrap"><span class="icon"></span><input type="text" id="last_name" name="last_name" placeholder="Last Name" required/></div>
            </div>
            <div class="form-group suggest">
              <label class="required" for="company">Company</label>
              <div class="input-wrap"><span class="icon"></span><input type="text" id="company" name="company" placeholder="Company Name" required/></div>
              <div id="companyList" class="suggest-list"></div>
              <div class="help">Tip: start typing to search saved customers.</div>
            </div>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label class="required" for="phone">Phone</label>
              <div class="input-wrap"><span class="icon"></span><input type="tel" id="phone" name="phone" placeholder="(123) 456-7890" required/></div>
            </div>
            <div class="form-group">
              <label class="required" for="email">Email</label>
              <div class="input-wrap"><span class="icon"></span><input type="email" id="email" name="email" placeholder="email@example.com" required/></div>
            </div>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label for="po">PO Number</label>
              <div class="input-wrap"><span class="icon"></span><input type="text" id="po" name="po" placeholder="Purchase Order Number"/></div>
            </div>
            <div class="form-group">
              <label class="required" for="category">Category</label>
              <div class="input-wrap"><span class="icon"></span><select id="category" name="category" required></select></div>
            </div>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label for="blast">Surface Prep</label>
              <div class="input-wrap"><span class="icon"></span><select id="blast" name="blast"></select></div>
            </div>
            <div class="form-group">
              <label class="required" for="priority">Priority</label>
              <div class="input-wrap"><span class="icon"></span><select id="priority" name="priority" required></select></div>
            </div>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label for="colorFamily">Color Family</label>
              <div class="input-wrap"><span class="icon"></span>
                <select id="colorFamily"></select>
              </div>
              <div class="help">Filter color options by family.</div>
            </div>
            <div class="form-group">
              <label for="color">Color</label>
              <div class="input-wrap">
                <span class="icon"></span>
               <input list="powderColors" id="color" name="color" placeholder="Start typing color..."/>
                <datalist id="powderColors"></datalist>
                <div id="aliasHint" class="help" style="display:none"></div>
              </div>
              <div class="help">Colors come from Powder Inventory.</div>
            </div>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label for="prep">Prep</label>
              <div class="input-wrap"><span class="icon"></span><select id="prep" name="prep"></select></div>
            </div>
            <div class="form-group">
              <label for="color_source">Color Source</label>
              <div class="input-wrap"><span class="icon"></span>
                <select id="color_source" name="color_source"></select>
              </div>
              <div class="help">For non-stock or customer-supplied colors.</div>
            </div>
          </div>

          <div class="form-row">
            <div class="form-group full">
              <label class="required" for="description">Description</label>
              <div class="input-wrap" style="padding-left:0"><textarea id="description" name="description" placeholder="Describe the work..." required></textarea></div>
            </div>
          </div>

          <div class="form-row">
            <div class="form-group full">
              <label for="notes">Notes</label>
              <div class="input-wrap" style="padding-left:0"><textarea id="notes" name="notes" placeholder="Additional notes..."></textarea></div>
            </div>
          </div>

          <div class="form-row">
            <div class="form-group full">
              <label for="photos">Photos</label>
              <div class="input-wrap" style="padding-left:0">
                <input type="file" id="photos" name="photos" accept="image/*,application/pdf" multiple />
              </div>
              <div class="help">Optional. Add one or more photos from your device. Large files may take longer to upload.</div>
            </div>
          </div>

          <div class="btns">
            <button type="reset" class="btn">Reset</button>
            <button type="submit" class="btn primary">Submit</button>
          </div>
        </form>
      </div>
    </div>

    <!-- Slide-over Editor -->
    <div class="admin" id="adminPanel" aria-hidden="true">
      <div class="section">
        <h3>Required Fields</h3>
        <div id="required-fields"></div>
        <div id="saveNote" class="help" style="margin-top:6px">Changes are global. You must be logged in as Admin to save.</div>
        <div id="saveErr" class="error" style="display:none"></div>
        <div id="saveOk" class="ok" style="display:none"></div>
      </div>

      <div class="section">
        <h3>Category <button class="pill" type="button" onclick="resetOptions('category')">Reset</button></h3>
        <div id="category-options"></div>
        <div class="row"><input type="text" id="new-category" placeholder="Add option"><button class="primary" type="button" onclick="addOption('category')">Add</button></div>
      </div>

      <div class="section">
        <h3>Surface Prep <button class="pill" type="button" onclick="resetOptions('blast')">Reset</button></h3>
        <div id="blast-options"></div>
        <div class="row"><input type="text" id="new-blast" placeholder="Add option"><button class="primary" type="button" onclick="addOption('blast')">Add</button></div>
      </div>

      <div class="section">
        <h3>Priority <button class="pill" type="button" onclick="resetOptions('priority')">Reset</button></h3>
        <div id="priority-options"></div>
        <div class="row"><input type="text" id="new-priority" placeholder="Add option"><button class="primary" type="button" onclick="addOption('priority')">Add</button></div>
      </div>

      <div class="section">
        <h3>Prep <button class="pill" type="button" onclick="resetOptions('prep')">Reset</button></h3>
        <div id="prep-options"></div>
        <div class="row"><input type="text" id="new-prep" placeholder="Add option"><button class="primary" type="button" onclick="addOption('prep')">Add</button></div>
      </div>

      <div class="section">
        <h3>Color Source <button class="pill" type="button" onclick="resetOptions('color_source')">Reset</button></h3>
        <div id="color_source-options"></div>
        <div class="row"><input type="text" id="new-color_source" placeholder="Add option"><button class="primary" type="button" onclick="addOption('color_source')">Add</button></div>
      </div>

      <div class="section" style="display:flex;gap:10px;justify-content:flex-end">
        <button type="button" onclick="closeEditor()">Close</button>
        <button type="button" class="btn primary" onclick="saveConfig()">Save (global)</button>
        <a class="btn" href="/login" title="Admin login">Admin Login</a>
      </div>
    </div>
    <div class="overlay" id="overlay" aria-hidden="true"></div>
  </div>

  <script>
    // ---------- State ----------
    let CONFIG = { options:{}, required:{} };
    const $ = id => document.getElementById(id);
    // Powder data for production intake
    let POWDER_COLORS = [];
    let POWDER_FAMILIES = [];

    // ---------- Customer Auto-Population ----------
    {% if customer_info %}
    document.addEventListener('DOMContentLoaded', function() {
      // Auto-populate form fields with customer information
      const customerData = {{ customer_info | tojson }};

      if (customerData.first_name && $('first_name')) {
        $('first_name').value = customerData.first_name;
      }
      if (customerData.last_name && $('last_name')) {
        $('last_name').value = customerData.last_name;
      }
      if (customerData.company_name && $('company')) {
        $('company').value = customerData.company_name;
      }
      if (customerData.phone && $('phone')) {
        $('phone').value = customerData.phone;
      }
      if (customerData.email && $('email')) {
        $('email').value = customerData.email;
      }

      // Show a notice that fields were auto-populated
      const notice = document.createElement('div');
      notice.className = 'alert alert-info mt-3';
      notice.innerHTML = '<strong>Info:</strong> Some fields have been auto-populated with your account information. You can edit them as needed.';
      const formBody = document.querySelector('.form-body');
      if (formBody) {
        formBody.insertBefore(notice, formBody.firstChild);
      }
    });
    {% endif %}

    // ---------- Utilities ----------
    function showErr(msg){ const e=$('saveErr'); e.textContent=msg; e.style.display='block'; $('saveOk').style.display='none'; }
    function showOk(msg){ const e=$('saveOk'); e.textContent=msg; e.style.display='block'; $('saveErr').style.display='none'; }

    // ---------- API ----------
    async function fetchConfig(){
      const r = await fetch('/config/intake.json', {cache:'no-store'});
      if(!r.ok) throw new Error(`Load failed (${r.status})`);
      CONFIG = await r.json();
      // Harden structure
      CONFIG.options ||= {};
      CONFIG.required ||= {};
      for(const k of ['category','blast','priority','prep','color_source']){
        CONFIG.options[k] ||= [];
      }
    }
    async function postConfig(){
      const r = await fetch('/config/intake', {
        method:'POST',
        headers:{'Content-Type':'application/json'},
        body: JSON.stringify(CONFIG)
      });
      if(!r.ok){
        if(r.status === 403){ throw new Error('Admin login required. Go to /login.'); }
        const text = await r.text();
        throw new Error(`Save failed (${r.status}): ${text || 'unknown error'}`);
      }
    }

    // ---------- UI helpers ----------
    function populateSelect(id, arr, addPlaceholder){
      const sel = $(id); if(!sel) return;
      sel.innerHTML = '';
      if(addPlaceholder){
        const o=document.createElement('option'); o.value=''; o.textContent='Select ' + id[0].toUpperCase()+id.slice(1);
        sel.appendChild(o);
      }
      (arr||[]).forEach(v=>{
        const o=document.createElement('option'); o.value=v; o.textContent=v; sel.appendChild(o);
      });
    }
    function applyRequired(){
      const map = CONFIG.required||{};
      Object.keys(map).forEach(key=>{
        const el=$(key); if(!el) return;
        el.required = !!map[key];
        const lab = el.closest('.form-group')?.querySelector('label');
        if(lab) lab.classList.toggle('required', !!map[key]);
      });
    }

    function renderEditor(){
      // Required
      const reqWrap = $('required-fields'); reqWrap.innerHTML='';
      const keys = ['dateIn','dueBy','first_name','last_name','company','phone','email','category','priority','description','prep','blast','color','color_source','po','notes'];
      keys.forEach(k=>{
        if(!(k in CONFIG.required)) CONFIG.required[k] = false;
        // Special handling for split name fields
        if (k === 'name') {
          // Add first_name and last_name instead of name
          ['first_name', 'last_name'].forEach(nameField => {
            const row=document.createElement('div'); row.className='row'; row.style.justifyContent='space-between';
            const lab=document.createElement('div'); lab.textContent=nameField.replace('_', ' ');
            const cb=document.createElement('input'); cb.type='checkbox'; cb.checked=!!CONFIG.required[k];
            cb.addEventListener('change',()=>{ CONFIG.required[nameField]=cb.checked; applyRequired(); });
            row.appendChild(lab); row.appendChild(cb); reqWrap.appendChild(row);
          });
        } else {
          const row=document.createElement('div'); row.className='row'; row.style.justifyContent='space-between';
          const lab=document.createElement('div'); lab.textContent=k;
          const cb=document.createElement('input'); cb.type='checkbox'; cb.checked=!!CONFIG.required[k];
          cb.addEventListener('change',()=>{ CONFIG.required[k]=cb.checked; applyRequired(); });
          row.appendChild(lab); row.appendChild(cb); reqWrap.appendChild(row);
        }
      });

      // Options editors
      ['category','blast','priority','prep','color_source'].forEach(key=>{
        const host=$(key+'-options'); host.innerHTML='';
        (CONFIG.options[key]||[]).forEach((opt,idx)=>{
          const r=document.createElement('div'); r.className='opt-row';
          const inp=document.createElement('input'); inp.className='grow'; inp.type='text'; inp.value=opt;
          inp.addEventListener('change', e=>{
            const v=e.target.value.trim(); if(!v){ e.target.value=CONFIG.options[key][idx]; return; }
            CONFIG.options[key][idx]=v;
            populateSelect(key, CONFIG.options[key], !!CONFIG.required[key]);
          });
          const del=document.createElement('button'); del.type='button'; del.textContent='Delete';
          del.addEventListener('click', ()=>{
            CONFIG.options[key].splice(idx,1);
            renderEditor(); populateSelect(key, CONFIG.options[key], !!CONFIG.required[key]);
          });
          r.appendChild(inp); r.appendChild(del); host.appendChild(r);
        });
      });
    }

    function addOption(key){
      const el = $('new-'+key); if(!el) return;
      const v = el.value.trim(); if(!v) return;
      if(!CONFIG.options[key]) CONFIG.options[key]=[];
      if(CONFIG.options[key].includes(v)) return;
      CONFIG.options[key].push(v); el.value='';
      renderEditor(); populateSelect(key, CONFIG.options[key], !!CONFIG.required[key]);
    }
    function resetOptions(key){
      const defaults = {
        category: ['Railing','Stairs','Gates','Fencing','Other'],
        blast:    ['Light Etch','Medium Etch','Heavy Etch','None'],
        priority: ['Standard','Semi Rush','Rush','Emergency'],
        prep:     ['Base /','Full Prep','Touch Up','None Required']
      };
      CONFIG.options[key] = [...defaults[key]];
      renderEditor(); populateSelect(key, CONFIG.options[key], !!CONFIG.required[key]);
    }

    function openEditor(){ $('adminPanel').classList.add('open'); $('overlay').classList.add('open'); }
    function closeEditor(){ $('adminPanel').classList.remove('open'); $('overlay').classList.remove('open'); }

    async function saveConfig(){
      $('saveErr').style.display='none'; $('saveOk').style.display='none';
      try{
        await postConfig();
        showOk('Saved globally âœ…  (refresh other devices to see changes)');
        // Close the editor after successful save
        setTimeout(() => {
          closeEditor();
        }, 1500); // Wait 1.5 seconds to show the success message
      }catch(e){
        showErr(e.message || 'Save failed');
      }
    }

    // Company autosuggest
    let suggestTimer=null;
    async function queryCustomers(q, exact=false){
      try{
        const r = await fetch('/customers/search.json?q=' + encodeURIComponent(q) + (exact ? '&exact=1' : ''));
        return await r.json();
      }catch(e){ return []; }
    }
    function setupCompanySuggest(){
      const input=$('company'), list=$('companyList');
      input.addEventListener('input', ()=>{
        clearTimeout(suggestTimer);
        const q=input.value.trim();
        if(!q){ list.style.display='none'; list.innerHTML=''; return; }
        suggestTimer=setTimeout(async ()=>{
          const items = await queryCustomers(q,false);
          if(!items.length){ list.style.display='none'; list.innerHTML=''; return; }
          list.innerHTML='';
          items.forEach(it=>{
            const div=document.createElement('div');
            div.className='suggest-item';
            div.textContent = it.company + (it.contact_name?(' â€” '+it.contact_name):'');
            div.addEventListener('click', ()=>{
              input.value = it.company || '';
              $('name').value = it.contact_name || '';
              $('phone').value = it.phone || '';
              $('email').value = it.email || '';
              list.style.display='none'; list.innerHTML='';
              input.focus();
            });
            list.appendChild(div);
          });
          list.style.display='block';
        }, 200);
      });
      input.addEventListener('blur', async ()=>{
        const q=input.value.trim(); if(!q) return;
        const items = await queryCustomers(q,true);
        if(items.length){
          const it=items[0];
          // Split contact name into first and last
          const nameParts = (it.contact_name || '').split(' ');
          $('first_name').value = nameParts[0] || $('first_name').value;
          $('last_name').value = nameParts.slice(1).join(' ') || $('last_name').value;
          $('phone').value = it.phone || $('phone').value;
          $('email').value = it.email || $('email').value;
        }
      });
    }

    function populateFamilySelect(fams){
      const sel = $('colorFamily'); if(!sel) return;
      sel.innerHTML = '';
      const optAll = document.createElement('option'); optAll.value=''; optAll.textContent='All families'; sel.appendChild(optAll);
      (fams||[]).forEach(f=>{ const o=document.createElement('option'); o.value=f; o.textContent=f; sel.appendChild(o); });
    }
    function rebuildPowderDatalist(){
      const dl = $('powderColors'); if(!dl) return;
      const famSel = $('colorFamily'); const fam = famSel ? famSel.value : '';
      dl.innerHTML='';
      let arr = Array.isArray(POWDER_COLORS) ? POWDER_COLORS : [];
      if (fam) arr = arr.filter(it => (it && (it.family||'')) === fam);
      arr.forEach(it => { const v=(it&&it.color)||''; if(v){ const o=document.createElement('option'); o.value=v; if(it && it.aliases){ o.label = v + ' - ' + it.aliases; } dl.appendChild(o); } });
    }
    async function loadPowderColors(){
      try{
        // Families (optional)
        try{
          const rFam = await fetch('/powders/families.json', {cache:'no-store'});
          POWDER_FAMILIES = (await rFam.json()) || [];
        }catch(_){ POWDER_FAMILIES = []; }
        const res = await fetch('/powders/colors_full.json', {cache:'no-store'});
        if(!res.ok) return;
        POWDER_COLORS = await res.json();
        // Derive families if none returned
        if ((!POWDER_FAMILIES || !POWDER_FAMILIES.length) && Array.isArray(POWDER_COLORS)){
          try{
            const uniq = {};
            POWDER_COLORS.forEach(it => { const f=(it&&it.family)||''; if(f) uniq[f]=1; });
            POWDER_FAMILIES = Object.keys(uniq).sort((a,b)=>a.localeCompare(b));
          }catch(_){ POWDER_FAMILIES = []; }
        }
        populateFamilySelect(POWDER_FAMILIES);
        rebuildPowderDatalist();
      }catch(e){}
    }

    function setDefaultDates(){
      const now=new Date();
      const toISO=(d)=>new Date(d.getTime()-d.getTimezoneOffset()*60000).toISOString().slice(0,10);
      $('dateIn').value = toISO(now);
      const due=new Date(now); due.setDate(due.getDate()+7);
      $('dueBy').value = toISO(due);
    }

    function setIcon(id, svg){
      var el = document.getElementById(id); if(!el) return;
      var wrap = el.closest('.input-wrap'); if(!wrap) return;
      var s = wrap.querySelector('.icon'); if(!s) return;
      s.innerHTML = svg;
    }
    var ICONS={
      calendar:'<svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><rect x="3" y="4" width="18" height="18" rx="2"/><line x1="16" y1="2" x2="16" y2="6"/><line x1="8" y1="2" x2="8" y2="6"/><line x1="3" y1="10" x2="21" y2="10"/></svg>',
      user:'<svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/></svg>',
      building:'<svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><path d="M3 21h18"/><path d="M9 8h6v13H9z"/><path d="M4 21V10h5"/></svg>',
      phone:'<svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><path d="M22 16.92V21a2 2 0 0 1-2.18 2 19.86 19.86 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6A19.86 19.86 0 0 1 2 4.18 2 2 0 0 1 4 2h4.09a2 2 0 0 1 2 1.72l.57 3.26a2 2 0 0 1-.52 1.7L9 10a16 16 0 0 0 5 5l1.32-1.14a2 2 0 0 1 1.7-.52l3.26.57A2 2 0 0 1 22 16.92z"/></svg>',
      mail:'<svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><path d="M4 4h16v16H4z"/><path d="M22 6l-10 7L2 6"/></svg>',
      tag:'<svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><path d="M20.59 13.41L11 3H4v7l9.59 9.59a2 2 0 0 0 2.82 0l4.18-4.18a2 2 0 0 0 0-2.82z"/><circle cx="7.5" cy="7.5" r="1.5"/></svg>',
      flag:'<svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><path d="M4 22V4h11l-1 3 3 1-1 3 3 1v7z"/></svg>',
      wrench:'<svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><path d="M14.7 6.3a4 4 0 1 0-5.66 5.66L3 18l3 3 6.04-6.04a4 4 0 0 0 2.66-8.66z"/></svg>',
      droplet:'<svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><path d="M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0L12 2.69z"/></svg>'
    };

    async function init(){
      // Bind buttons
      $('openEditorBtn').addEventListener('click', openEditor);
      $('overlay').addEventListener('click', closeEditor);

      // Load server config (fallback to defaults on error)
      try{
        await fetchConfig();
      }catch(e){
        console.error(e);
        CONFIG = {
          options:{
            category:['Railing','Stairs','Gates','Fencing','Other'],
            blast:['Light Etch','Medium Etch','Heavy Etch','None'],
            priority:['Standard','Semi Rush','Rush','Emergency'],
            prep:['Base /','Full Prep','Touch Up','None Required']
          },
          required:{
            dateIn:true, dueBy:false, name:true, company:true, phone:true, email:true,
            category:true, priority:true, description:true, prep:false, blast:false, color:false, po:false, notes:false
          }
        };
        // Show a small banner in editor so it's obvious
        showErr('Could not load global config from server; using defaults (not saved).');
      }

      // Populate selects & apply required
      populateSelect('category', CONFIG.options.category, !!CONFIG.required.category);
      populateSelect('blast',    CONFIG.options.blast,    !!CONFIG.required.blast);
      populateSelect('priority', CONFIG.options.priority, !!CONFIG.required.priority);
      populateSelect('prep',     CONFIG.options.prep,     !!CONFIG.required.prep);
      populateSelect('color_source', CONFIG.options.color_source || [], !!CONFIG.required.color_source);
      applyRequired();

      // Render editor UI
      renderEditor();

      // Helpers
      setDefaultDates();
      loadPowderColors();
      // Show aliases when a known color is entered
      const colorInput = $('color');
      const aliasHint = $('aliasHint');
      function updateAliasHint(){
        if(!colorInput || !aliasHint) return;
        const val = (colorInput.value||'').trim().toLowerCase();
        const hit = (POWDER_COLORS||[]).find(it => (it && (it.color||'').trim().toLowerCase()) === val);
        const aliases = hit && hit.aliases ? String(hit.aliases).trim() : '';
        if(aliases){ aliasHint.textContent = 'Aliases: ' + aliases; aliasHint.style.display='block'; }
        else { aliasHint.textContent = ''; aliasHint.style.display='none'; }
      }
      if (colorInput){ colorInput.addEventListener('input', updateAliasHint); colorInput.addEventListener('blur', updateAliasHint); }
      const famSel = $('colorFamily');
      if (famSel) famSel.addEventListener('change', () => { try{ $('color').value=''; }catch(_){} rebuildPowderDatalist(); });
      setupCompanySuggest();

      // Icons
      setIcon('dateIn', ICONS.calendar);
      setIcon('dueBy', ICONS.calendar);
      setIcon('first_name', ICONS.user);
      setIcon('last_name', ICONS.user);
      setIcon('company', ICONS.building);
      setIcon('phone', ICONS.phone);
      setIcon('email', ICONS.mail);
      setIcon('po', ICONS.tag);
      setIcon('priority', ICONS.flag);
      setIcon('prep', ICONS.wrench);
      setIcon('color', ICONS.droplet);
      setIcon('colorFamily', ICONS.tag);
      setIcon('color_source', ICONS.tag);
      setIcon('category', ICONS.tag);
      setIcon('blast', ICONS.wrench);

      // Submitted notice (banner that auto-hides)
      const sp=new URLSearchParams(location.search);
      if(sp.get('submitted')==='1'){
        history.replaceState({},'',location.pathname);
        try{
          const bn = $('submitBanner');
          if(bn){
            bn.textContent = 'Form submitted!';
            bn.style.display = 'block';
            bn.style.opacity = '1';
            setTimeout(()=>{ bn.style.opacity = '0'; setTimeout(()=>{ bn.style.display='none'; bn.style.opacity='1'; }, 450); }, 2500);
          }
        }catch(e){ /* ignore */ }
      }
    }

    window.addEventListener('DOMContentLoaded', init);
  </script>
</body>
</html>




